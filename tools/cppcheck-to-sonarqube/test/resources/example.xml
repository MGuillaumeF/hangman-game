<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.4.1"/>
    <errors>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;user::id_&apos; is not initialized in the constructor." verbose="Member variable &apos;user::id_&apos; is not initialized in the constructor." cwe="398">
            <location file0="data-management/src/main.cpp" file="data-management/src/model/user.hxx" line="15" column="3"/>
            <symbol>user::id_</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;joe&apos; shadows outer variable" verbose="Local variable &apos;joe&apos; shadows outer variable" cwe="398">
            <location file="data-management/src/main.cpp" line="89" column="20" info="Shadow variable"/>
            <location file="data-management/src/main.cpp" line="47" column="8" info="Shadowed declaration"/>
            <symbol>joe</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::replace_if algorithm instead of a raw loop." verbose="Consider using std::replace_if algorithm instead of a raw loop." cwe="398">
            <location file="server/src/common/HTTP/LocationEndpoint.cpp" line="51" column="11"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Logger::getLog&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;Logger::getLog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." cwe="398" inconclusive="true">
            <location file0="server/src/common/Logger/Logger.cpp" file="server/src/common/Logger/Logger.hpp" line="118" column="15"/>
            <location file="server/src/common/Logger/Logger.cpp" line="88" column="21"/>
            <symbol>Logger::getLog</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;addAppender&apos; argument 3 names different: declaration &apos;tracer&apos; definition &apos;appender&apos;." verbose="Function &apos;addAppender&apos; argument 3 names different: declaration &apos;tracer&apos; definition &apos;appender&apos;." cwe="628" inconclusive="true">
            <location file="server/src/common/Logger/Logger.cpp" line="132" column="44"/>
            <location file0="server/src/common/Logger/Logger.cpp" file="server/src/common/Logger/Logger.hpp" line="110" column="38"/>
            <symbol>addAppender</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nbSuccess&apos; can be reduced." verbose="The scope of the variable &apos;nbSuccess&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="server/test/it/httpClient.cpp" line="95" column="11"/>
            <symbol>nbSuccess</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getLevel&apos; is never used." verbose="The function &apos;getLevel&apos; is never used." cwe="561">
            <location file="server/src/common/Logger/Logger.cpp" line="30" column="0"/>
            <symbol>getLevel</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
