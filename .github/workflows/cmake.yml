name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BOOST_VERSION: 77

permissions: write-all

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install nodejs
      run: sudo apt install -y nodejs

    - name: Install make
      run: sudo apt-get install -y build-essential

    - name: Install graphviz
      run: sudo apt-get install -y graphviz

    - name: Install doxygen 
      run: sudo apt-get install -y doxygen

    - name: Install llvm 
      run: sudo apt-get install -y llvm

    - name: Install lcov
      run: sudo apt-get install -y lcov

    - name: Download Boost
      uses: wei/wget@v1
      with:
        args: -O boost_1_${{env.BOOST_VERSION}}_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.${{env.BOOST_VERSION}}.0/boost_1_${{env.BOOST_VERSION}}_0.tar.gz/download
    - name: Unzip Boost
      run: tar xzvf ./boost_1_${{env.BOOST_VERSION}}_0.tar.gz
    - name: Bootstrap Boost
      run: cd ./boost_1_${{env.BOOST_VERSION}}_0; sudo ./bootstrap.sh ; sudo ./b2 install

    - name: Install client's dependencies
      run: cd ./client; npm install

    - name: Build client
      run: cd ./client; npm build

    - name: Generate target
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/server/bin -DCMAKE_CXX_COMPILER=make -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Coverage
      run: lcov --directory ./server/bin/CMakeFiles/ApplicationExample.dir/server/src -c -o ./server/report/resultCoverageRuntime.info --no-external

    - name: Reports
      run: genhtml --highlight --legend --output-directory ./server/coverage -t "Hangman game Server coverage report" ./server/report/resultCoverageRuntime.info ./server/report/resultCoverage.info

    - name: Docs
      run: doxygen docg.conf
      
