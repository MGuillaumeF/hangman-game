name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BOOST_VERSION: 77

permissions: write-all

jobs:
 build-server:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: graphviz
      run: sudo apt-get install -y graphviz

    - name: Install doxygen 
      run: sudo apt-get install -y doxygen

    - name: Install lcov
      run: sudo apt-get install -y lcov

    - name: Install make
      run: sudo apt-get install -y build-essential

    - name: Install llvm 
      run: sudo apt-get install -y llvm

    - name: Download Boost
      uses: wei/wget@v1
      with:
        args: -O boost_1_${{env.BOOST_VERSION}}_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.${{env.BOOST_VERSION}}.0/boost_1_${{env.BOOST_VERSION}}_0.tar.gz/download

    - name: Unzip Boost
      run: tar xzvf ${{github.workspace}}/boost_1_${{env.BOOST_VERSION}}_0.tar.gz

    - name: Bootstrap Boost
      run: |
        cd ${{github.workspace}}/boost_1_${{env.BOOST_VERSION}}_0; \
        sudo ./bootstrap.sh --with-toolset=clang; \
        sudo ./b2 toolset=clang; \
        sudo ./b2 install

    - name: Generate target
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/server/bin -DCMAKE_CXX_COMPILER=make -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin

    - name: Archive Server
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game
        path: ${{github.workspace}}/server/bin/HangmanGame

    # - name: lcov init
    #   run: lcov --no-external --capture --initial --directory ${{github.workspace}}/server --output-file ${{github.workspace}}/.lcov/server/base.info

    - name: Test
      working-directory: ${{github.workspace}}/server/bin
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./HangmanGameTest

    # - name: lcov after test
    #   run: lcov --no-external --capture --directory ${{github.workspace}}/server --output-file ${{github.workspace}}/.lcov/server/test.info

    - name: Merge raw coverage instrumentation profile
      run: llvm-profdata merge -output=${{github.workspace}}/server/bin/project.profdata ${{github.workspace}}/server/bin/default.profraw

    # - name: Coverage Gcov
    #   run: cd ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/server; gcov **/*.gcno -a -u -b -c

    # - name: Coverage
    #   run: llvm-cov export -format=lcov -instr-profile ${{github.workspace}}/server/bin/project.profdata -object=${{github.workspace}}/server/bin/HangmanGameTest

    # - name: Reports
    #   run: genhtml --highlight --legend --output-directory ${{github.workspace}}/server/coverage -t "Hangman game Server coverage report" ${{github.workspace}}/server/coverage.info


      - name: Generate Swagger UI
        uses: Legion2/swagger-ui-action@v1
        with:
          output: ${{github.workspace}}/swagger-ui
          spec-file: ${{github.workspace}}/server/docs/api_doc.json

    - name: Docs
      run: tree ${{github.workspace}}/server; doxygen docg.conf


    - name: Archive Docs
      uses: actions/upload-artifact@v2
      with:
        name: Docs-Hangman-Game
        path: ${{github.workspace}}/docs

      
 build-client:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Install nodejs
      run: sudo apt install -y nodejs

    - name: Install client's dependencies
      run: |
        cd ${{github.workspace}}/client; \
        npm install

    - name: Build client
      run: |
        cd ${{github.workspace}}/client; \
        npm run build

    - name: Archive IHM
      uses: actions/upload-artifact@v2
      with:
        name: IHM-Hangman-Game
        path: ${{github.workspace}}/client/build
