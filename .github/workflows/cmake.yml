name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install graphviz
      run: sudo apt-get install -y graphviz

    - name: Install doxygen 
      run: sudo apt-get install -y doxygen

    - name: Install llvm 
      run: sudo apt-get install -y llvm

    - name: Install lcov
      run: sudo apt-get install -y lcov

    - name: Download Boost
      uses: wei/wget@v1
      with:
        args: -qO- https://dl.bintray.com/boostorg/release/1.77.0/source/boost_1_77_0.tar.bz2
    - name: Unzip Boost
      run: tar --bzip2 -xf ./boost_1_77_0.tar.bz2;
    - name: Bootstrap Boost
      run: cd ./boost_1_77_0; ./bootstrap.sh;
    - name: Build Boost  
      run: ./b2 toolset=clang threading=multi runtime-link=static  link=static cxxflags="-stdlib=libc++ -std=c++11" linkflags="-stdlib=libc++" address-model=64;
    - name: Install Boost
      run: ./b2 install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}}/server -B ${{github.workspace}}/server/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Coverage
      run: lcov --directory . -c -o ./server/report/resultCoverageRuntime.info --no-external

    - name: Reports
      run: genhtml --highlight --legend --output-directory ./server/coverage -t "Boost Server coverage report" ./server/report/resultCoverageRuntime.info ./server/report/resultCoverage.info

    - name: Docs
      run: doxygen docg.conf
      
