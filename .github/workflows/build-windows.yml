name: HANGMAN-GAME - BUILD WINDOWS

on:
  workflow_dispatch:
    inputs:
     BUILD_TYPE:
      description: 'Build type'
      required: true
      default: 'Release'
      type: choice
      options:
        - Debug
        - Release
     BOOST_VERSION:
      default: 1.81.0
      required: true
      type: string
     APPLICATION_NAME:
      default: HangmanGame
      required: true
      type: string
     APPLICATION_VERSION:
      default: 0.1.0
      required: true
      type: string
  workflow_call:
    inputs:
     BUILD_TYPE:
      description: 'Build type'
      required: true
      default: Release
      type: string
     BOOST_VERSION:
      default: 1.81.0
      required: true
      type: string
     APPLICATION_NAME:
      default: HangmanGame
      required: true
      type: string
     APPLICATION_VERSION:
      default: 0.1.0
      required: true
      type: string

permissions: write-all

jobs:

 build:
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v3
    
    - name: Create reports directory
      if: ${{ inputs.BUILD_TYPE == 'Debug' }}
      run: mkdir ${{github.workspace}}/server/reports

    - uses: actions/download-artifact@v4
      with:
        name: IHM-Hangman-Game
        path: ${{github.workspace}}/client/build

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.3
      id: install-boost
      with:
        boost_version: ${{inputs.BOOST_VERSION}}
        # OPTIONAL: in workspace by default
        boost_install_dir: 'D:/'

    - name: Install ODB_ROOT
      working-directory: ${{github.workspace}}/tools/cli-tools
      run: |
        npm install
        npm run download https://www.codesynthesis.com/download/odb/2.4/odb-2.4.0-i686-windows.zip odb-2.4.0-i686-windows.zip
        npm run extract odb-2.4.0-i686-windows.zip C:\/tools
        echo "C:\\tools\\odb-2.4.0-i686-windows\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: generate model
      working-directory: ${{github.workspace}}/data-management/src/model
      run: |
        odb --version
        mkdir sqlite
        copy ./*.* ./sqlite/
        cd sqlite
        odb --database sqlite --generate-query --generate-schema --std c++14 -I${{ steps.install-boost.outputs.BOOST_ROOT }}/include/ -I${{github.workspace}}/data-management/src/model *.hxx

    - name: Install lib odb
      working-directory: ${{github.workspace}}/..
      run: |
        git clone https://github.com/Microsoft/vcpkg
        cd vcpkg
        git pull
        .\bootstrap-vcpkg.sh
        cmd.exe /C "vcpkg update"
        cmd.exe /C "vcpkg integrate install"
        # cmd.exe /C "vcpkg install boost --triplet x64-windows"
        cmd.exe /C "vcpkg install libodb --triplet x64-windows"
        cmd.exe /C "vcpkg install libodb-sqlite --triplet x64-windows"

    - name: Generate target 
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{inputs.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/../vcpkg/scripts/buildsystems/vcpkg.cmake
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build server windows
      working-directory: ${{github.workspace}}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/bin --config ${{inputs.BUILD_TYPE}}

    - name: Unit Tests
      if: ${{ inputs.BUILD_TYPE == 'Debug' }}
      run: ${{github.workspace}}/bin/server/test/ut/Debug/HangmanGameTest.exe --result_code=no --show_progress=yes --log_level=all --log_format=XML --report_level=detailed --report_format=XML --log_sink=${{github.workspace}}/server/reports/reports.xml --report_sink=${{github.workspace}}/server/reports/reportUT.xml
    
    - name: Archive Test report
      if: ${{ inputs.BUILD_TYPE == 'Debug' }}
      uses: actions/upload-artifact@v4
      with:
        name: Server-Hangman-Game Unit Test (win - temp) - Reports
        path: ${{github.workspace}}/server/reports

    - name: Package server
      if: ${{ inputs.BUILD_TYPE == 'Release' }}
      working-directory: ${{github.workspace}}/bin
      # Build your program with the given configuration
      run: cpack -G "ZIP;NSIS64"

    - name: Archive Application windows ZIP
      if: ${{ inputs.BUILD_TYPE == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-win64.zip
        path: ${{github.workspace}}/bin/${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-win64.zip

    - name: Archive Application windows NSIS 64
      if: ${{ inputs.BUILD_TYPE == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-win64.exe
        path: ${{github.workspace}}/bin/${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-win64.exe

