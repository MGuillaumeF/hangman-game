name: HANGMAN-GAME - DEFAULT

on:
  push:
    branches: [ main ]
  pull_request:
    branches: 
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  BOOST_VERSION: 78
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  CPP_COSO_VERSION: 0.1.0

permissions: write-all

jobs:
 build-server-linux:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Install dependencies
      run: sudo apt-get update -y && sudo apt-get install -y gcovr doxygen graphviz gcovr clang-tidy cppcheck default-libmysqlclient-dev odb libodb-dev libodb-mysql-2.4 mysql-community-client-plugins mysql-common; odb --version; mysql --version

    # - name: Download Boost
    #   uses: wei/wget@v1
    #   with:
    #.    args: -O boost_1_${{env.BOOST_VERSION}}_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.${{env.BOOST_VERSION}}.0/boost_1_${{env.BOOST_VERSION}}_0.tar.gz/download

    # - name: Unzip Boost
    #   run: tar xzvf ${{github.workspace}}/boost_1_${{env.BOOST_VERSION}}_0.tar.gz

    # - name: Bootstrap Boost
    #   working-directory: ${{github.workspace}}/boost_1_${{env.BOOST_VERSION}}_0
    #   run: |
    #     sudo ./bootstrap.sh; \
    #     sudo ./b2 install

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/server/reports; 

    - name: Analyze CPPCheck
      uses: deep5050/cppcheck-action@main
      with:
        github_token: ${{ secrets.SONAR_REPO_ACCESS_TOKEN }}
        force_language: c++
        std: c++20
        output_file: ${{github.workspace}}/server/reports/cppcheck_report_actions.xml
        other_options: --xml

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: 1.${{env.BOOST_VERSION}}.0

    - name: Generate Model Sources
      working-directory: ${{github.workspace}}/data-management/src/model
      run: odb -d mysql --generate-query --generate-schema user.hxx; ls -a .

    - name: Start MySQL server
      run: sudo service mysql start 

    - name: Update Database schema
      run: sudo mysql -e 'CREATE USER odb_test@localhost;CREATE DATABASE odb_test;GRANT ALL PRIVILEGES ON *.* TO odb_test@localhost WITH GRANT OPTION;FLUSH PRIVILEGES;' --user=root --password=root

    - name: Update Database schema
      working-directory: ${{github.workspace}}/data-management/src/model
      run:  mysql --user=odb_test --database=odb_test < user.sql

    - name: Generate target (data management)
      run: cmake -S ${{github.workspace}}/data-management -B ${{github.workspace}}/data-management/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Data Management
      working-directory: ${{github.workspace}}/data-management
      run: cmake --build ${{github.workspace}}/data-management/bin

    - name: Test Data Management
      working-directory: ${{github.workspace}}/data-management/bin
      run: ctest --verbose

    - name: Generate target
      run: cmake -S ${{github.workspace}}/server -B ${{github.workspace}}/server/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build server
      working-directory: ${{github.workspace}}/server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin
    
    - name: Run clang-tidy
      if: github.event_name == 'pull_request'
      uses: ZedThree/clang-tidy-review@v0.7.0
      id: review
      with:
         build_dir: server/bin
         exclude: data-management/**/*.[ch]xx,data-management/**/*.[ch]pp

    - name: Archive Server
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game-Linux
        path: ${{github.workspace}}/server/bin/HangmanGame

    - name: Unit Tests Graph
      working-directory: ${{github.workspace}}/server/bin
      run: ./HangmanGameTest --list_content=DOT > ${{github.workspace}}/server/reports/content.dot 2>&1; dot ${{github.workspace}}/server/reports/content.dot -Tsvg -o ${{github.workspace}}/server/reports/content.svg
   
    - name: Server Tests ctest
      working-directory: ${{github.workspace}}/server/test
      run: chmod +x ./run-tests.sh; ./run-tests.sh

    # - name: gcov after unit tests
    #   working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/src
    #   run: find -name '*.gcda' | xargs gcov;

    - name: Generate Unit Tests HTML report
      working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/src
      run: gcovr --root ${{github.workspace}}/server/src --html-details ${{github.workspace}}/server/reports/HangmanGameUnitTestReport.html --html-title "HangmanGame Server Coverage report" ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/src
      
    - name: Generate Integration Tests HTML report
      working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src
      run: gcovr --root ${{github.workspace}}/server/src --html-details ${{github.workspace}}/server/reports/HangmanGameIntegrationTestReport.html --html-title "HangmanGame Server Coverage report" ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src

    # - name: gcov after integration tests
    #   working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src
    #   run: find -name '*.gcda' | xargs gcov;

    - name: Archive Test report
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game Unit Test - Reports
        path: ${{github.workspace}}/server/reports

    - name: Generate Swagger UI
      uses: Legion2/swagger-ui-action@v1
      with:
        output: ${{github.workspace}}/swagger-ui
        spec-file: ${{github.workspace}}/server/docs/api_doc.json

    - name: Archive Swagger UI
      uses: actions/upload-artifact@v2
      with:
        name: API-Docs-Hangman-Game
        path: ${{github.workspace}}/swagger-ui

    - name: Doxygen Docs
      run: doxygen docg.conf

    - name: Archive Docs
      uses: actions/upload-artifact@v2
      with:
        name: Docs-Hangman-Game
        path: ${{github.workspace}}/docs

 build-server-win:
    if: github.actor != 'dependabot[bot]'
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v2

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/server/reports; 

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: 1.${{env.BOOST_VERSION}}.0
        # OPTIONAL: Specify a platform version
        platform_version: 2019
        # OPTIONAL: in workspace by default
        boost_install_dir: 'D:/'

    - name: Generate target 
      run: cmake -S ${{github.workspace}}/server -B ${{github.workspace}}/server/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build server windows
      working-directory: ${{github.workspace}}/server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin

    - name: Archive Server windows 
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game-Win
        path: ${{github.workspace}}/server/bin/Debug/*.exe

    - name: Unit Tests
      run: ${{github.workspace}}/server/bin/Debug/HangmanGameTest.exe --result_code=no --show_progress=yes --log_level=all --log_format=XML --report_level=detailed --report_format=XML --log_sink=${{github.workspace}}/server/reports/reports.xml --report_sink=${{github.workspace}}/server/reports/reportUT.xml

    - name: Archive Test report
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game Unit Test (win - temp) - Reports
        path: ${{github.workspace}}/server/reports

 build-server-MacOSX:
    if: github.actor != 'dependabot[bot]'
    runs-on: macos-11
    steps:

    - uses: actions/checkout@v2

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/server/reports; 

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: 1.${{env.BOOST_VERSION}}.0

    - name: Generate target
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}}/server -B ${{github.workspace}}/server/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build server
      working-directory: ${{github.workspace}}/server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin

    - name: Archive Server
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game-MacOSX
        path: ${{github.workspace}}/server/bin/HangmanGame

    - name: Server Tests ctest
      working-directory: ${{github.workspace}}/server/test
      run: chmod +x ./run-tests.sh; ./run-tests.sh

 sonarcloud-analyse:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Install dependencies
      run: sudo apt-get install -y clang-tidy cppcheck default-libmysqlclient-dev odb libodb-dev libodb-mysql-2.4 mysql-community-client-plugins mysql-common

    - name: Create reports directory (server)
      run: mkdir ${{github.workspace}}/server/reports; 

    - name: Lint Cpp Check (server)
      run: cppcheck --enable=all --inconclusive --language=c++ --std=c++20 --xml --output-file=${{github.workspace}}/server/reports/cppcheck_report.xml ${{github.workspace}}/server

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: 1.${{env.BOOST_VERSION}}.0

    - name: Generate Model Sources
      working-directory: ${{github.workspace}}/data-management/src/model
      run: odb -d mysql --generate-query --generate-schema user.hxx; ls -a .

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/data-management/reports; 

    - name: Lint Cpp Check
      run: cppcheck --enable=all --inconclusive --language=c++ --std=c++20 --xml --output-file=${{github.workspace}}/data-management/reports/cppcheck_report.xml ${{github.workspace}}/data-management

    - name: Start MySQL server
      run: sudo service mysql start 

    - name: Update Database schema
      run: sudo mysql -e 'CREATE USER odb_test@localhost;CREATE DATABASE odb_test;GRANT ALL PRIVILEGES ON *.* TO odb_test@localhost WITH GRANT OPTION;FLUSH PRIVILEGES;' --user=root --password=root

    - name: Update Database schema
      working-directory: ${{github.workspace}}/data-management/src/model
      run:  mysql --user=odb_test --database=odb_test < user.sql

    - name: Generate target (data management)
      run: cmake -S ${{github.workspace}}/data-management -B ${{github.workspace}}/data-management/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Data Management
      working-directory: ${{github.workspace}}/data-management
      run: cmake --build ${{github.workspace}}/data-management/bin

    - name: Test Data Management
      working-directory: ${{github.workspace}}/data-management/bin
      run: ctest --verbose

    - name: Lint Clang-Tidy (data-management)
      run: clang-tidy -checks='*' -header-filter='data-management/src/.*' -p data-management/bin data-management/**/*.*pp > ${{github.workspace}}/data-management/reports/clang_tidy_report.txt

    - name: Download cpp-coso ${{env.CPP_COSO_VERSION}}
      uses: wei/wget@v1
      with:
        args: -O cpp-coso-${{env.CPP_COSO_VERSION}}-Linux.deb https://mguillaumef.github.io/cpp-coso/delivery/${{env.CPP_COSO_VERSION}}/cpp-coso-${{env.CPP_COSO_VERSION}}-Linux.deb

    - name: Install cpp-coso
      run: sudo dpkg -i cpp-coso-${{env.CPP_COSO_VERSION}}-Linux.deb

    - name: Convert Lint Clang-Tidy to sonarqube format (data-management)
      run: /usr/cpp-coso/cpp-coso clang-tidy ${{github.workspace}}/data-management/reports/clang_tidy_report.txt ${{github.workspace}}/data-management/reports/clang-tidy-sonarqube-report.json

    - name: Convert Lint Cpp Check to sonarqube format
      run: /usr/cpp-coso/cpp-coso cppcheck ${{github.workspace}}/server/reports/cppcheck_report.xml ${{github.workspace}}/server/reports/cppcheck-sonarqube-report.json

    - name: Convert Lint Cpp Check to sonarqube format (data-management)
      run: /usr/cpp-coso/cpp-coso cppcheck ${{github.workspace}}/data-management/reports/cppcheck_report.xml ${{github.workspace}}/data-management/reports/cppcheck-sonarqube-report.json

    - name: Archive data-management report
      uses: actions/upload-artifact@v2
      with:
        name: Data-Management-Hangman-Game - Reports
        path: ${{github.workspace}}/data-management/reports

    - name: Generate target
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}}/server -B ${{github.workspace}}/server/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build server
      working-directory: ${{github.workspace}}/server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin

    - name: Lint Clang-Tidy
      run: clang-tidy -checks='*' -header-filter='server/src/.*' -p server/bin server/**/*.*pp > ${{github.workspace}}/server/reports/clang_tidy_report.txt

    - name: Convert Lint Clang-Tidy to sonarqube format
      run: /usr/cpp-coso/cpp-coso clang-tidy ${{github.workspace}}/server/reports/clang_tidy_report.txt ${{github.workspace}}/server/reports/clang-tidy-sonarqube-report.json

    - name: Server Tests ctest
      working-directory: ${{github.workspace}}/server/test
      run: chmod +x ./run-tests.sh; ./run-tests.sh

    - name: gcov after unit tests
      if: github.actor != 'dependabot[bot]'
      working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/src
      run: find -name '*.gcda' | xargs gcov;

    - name: gcov after integration tests
      if: github.actor != 'dependabot[bot]'
      working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src
      run: find -name '*.gcda' | xargs gcov;

    - name: Merge Coverage
      if: github.actor != 'dependabot[bot]'
      run: cp -r ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src ${{github.workspace}}/server/bin/coverage; gcov-tool merge --output ${{github.workspace}}/server/bin/coverage --verbose ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/src

    - name: gcov after merge
      if: github.actor != 'dependabot[bot]'
      working-directory: ${{github.workspace}}/server/bin/coverage
      run: find -name '*.gcda' | xargs gcov;

    - name: Archive Test report
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game - Reports
        path: ${{github.workspace}}/server/reports

    - name: Install client's dependencies
      working-directory: ${{github.workspace}}/client
      run: npm install

    - name: Build client
      working-directory: ${{github.workspace}}/client
      run: npm run build

    - name: Archive IHM
      uses: actions/upload-artifact@v2
      with:
        name: IHM-Hangman-Game
        path: ${{github.workspace}}/client/build

    - name: Client tests
      working-directory: ${{github.workspace}}/client
      run: npm start & (npm run cy:run && kill $(lsof -t -i:3000))

    - name: Archive IHM Tests videos 
      uses: actions/upload-artifact@v2
      with:
        name: IHM-Hangman-Game-Tests-Videos 
        path: ${{github.workspace}}/client/cypress/videos

    - name: Print summary coverage
      working-directory: ${{github.workspace}}/client
      run: npx nyc report --reporter=lcov --reporter=text-summary

    - name: ESlint analyze json
      working-directory: ${{github.workspace}}/client
      run: npm run lint:eslint:json || echo FAILED

    - name: ESlint analyze html
      working-directory: ${{github.workspace}}/client
      run: npm run lint:eslint || echo FAILED

    - name: Audit dependency
      working-directory: ${{github.workspace}}/client
      run: npm audit --json > ./dist/reports/audit-dependency-report.json || echo FAILED

    - name: Convert Audit dependency report
      working-directory: ${{github.workspace}}/client
      run: ./node_modules/.bin/audiso --input-file=./dist/reports/audit-dependency-report.json --output-file ./dist/reports/audit-report.json

    - name: Stylelint analyze
      working-directory: ${{github.workspace}}/client
      run: npm run lint:stylelint

    - name: Archive Analyses reports
      uses: actions/upload-artifact@v2
      with:
        name: IHM-Hangman-Game-Analyses-report
        path: ${{github.workspace}}/client/dist

    - name: Setup sonarqube
      if: github.actor != 'dependabot[bot]'
      uses: warchant/setup-sonar-scanner@v3

    - name: Run SonarQube data-management
      working-directory: ${{github.workspace}}/data-management
      if: github.actor != 'dependabot[bot]'
      env:
        GITHUB_TOKEN: ${{ secrets.SONAR_REPO_ACCESS_TOKEN }}
      run: sonar-scanner
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        -Dsonar.verbose=false

    - name: Run SonarQube
      if: github.actor != 'dependabot[bot]'
      env:
        GITHUB_TOKEN: ${{ secrets.SONAR_REPO_ACCESS_TOKEN }}
      run: sonar-scanner
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        -Dsonar.verbose=false

    - name: SonarQube Quality Gate check
      if: github.actor != 'dependabot[bot]'
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

 dependabot:
    needs: [sonarcloud-analyse]
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1.1.1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Enable auto-merge for Dependabot PRs 
        run: gh pr merge --delete-branch --auto --squash "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
