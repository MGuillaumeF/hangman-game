name: HANGMAN-GAME - DEFAULT

on:
  push:
    branches: [ main ]
  pull_request:
    branches: 
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BOOST_VERSION: 77
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

permissions: write-all

jobs:
 build-server-linux:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: graphviz
      run: sudo apt-get install -y graphviz

    - name: Install doxygen 
      run: sudo apt-get install -y doxygen

    - name: Install lcov
      run: sudo apt-get install -y lcov

    - name: Install make
      run: sudo apt-get install -y build-essential

    - name: Install llvm 
      run: sudo apt-get install -y llvm

    - name: Download Boost
      uses: wei/wget@v1
      with:
        args: -O boost_1_${{env.BOOST_VERSION}}_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.${{env.BOOST_VERSION}}.0/boost_1_${{env.BOOST_VERSION}}_0.tar.gz/download

    - name: Unzip Boost
      run: tar xzvf ${{github.workspace}}/boost_1_${{env.BOOST_VERSION}}_0.tar.gz

    - name: Bootstrap Boost
      working-directory: ${{github.workspace}}/boost_1_${{env.BOOST_VERSION}}_0
      run: |
        sudo ./bootstrap.sh; \
        sudo ./b2 install

    - name: Generate target
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/server/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/server/bin

    - name: Archive Server
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game
        path: ${{github.workspace}}/server/bin/HangmanGame

    # - name: lcov init
    #   run: lcov --no-external --capture --initial --directory ${{github.workspace}}/server --output-file ${{github.workspace}}/.lcov/server/base.info

    - name: Unit Tests
      working-directory: ${{github.workspace}}/server/bin
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: mkdir ${{github.workspace}}/server/reports; ./HangmanGameTest --list_content=DOT > ${{github.workspace}}/server/reports/content.dot 2>&1; dot ${{github.workspace}}/server/reports/content.dot -Tsvg -o ${{github.workspace}}/server/reports/content.svg; ./HangmanGameTest --show_progress=yes --log_level=all --log_format=XML --report_level=detailed --report_format=XML --log_sink=${{github.workspace}}/server/reports/reports.xml  --report_sink=${{github.workspace}}/server/reports/reportUT.xml

    - name: Integration Tests
      working-directory: ${{github.workspace}}/server/test
      run: chmod +x ./run-ti.sh; ./run-ti.sh || true

    - name: Archive Test report
      uses: actions/upload-artifact@v2
      with:
        name: Server-Hangman-Game Unit Test - Reports
        path: ${{github.workspace}}/server/reports

    - name: gcov after test
      working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/server/src
      run: find -name '*.gcno' | xargs gcov; find -name '*.gcda' | xargs gcov;

    # run: lcov --no-external --capture --directory ${{github.workspace}}/server --output-file ${{github.workspace}}/.lcov/server/test.info

    # - name: lcov after test
    #   run: cd ${{github.workspace}}/server/src/common/HTTP;gcov -a -b -c -f HttpUtils.cpp
    #   run: lcov --no-external --capture --directory ${{github.workspace}}/server --output-file ${{github.workspace}}/.lcov/server/test.info

    # - name: Merge raw coverage instrumentation profile
    #   run: llvm-profdata merge -output=${{github.workspace}}/server/bin/project.profdata ${{github.workspace}}/server/bin/default.profraw

    # - name: Generate llvm coverage report
    #   run: llvm-cov show -object HttpUtils --instr-profile= ${{github.workspace}}/server/bin/project.profdata --format=text > ${{github.workspace}}/server/coverage.txt

    # - name: Coverage Gcov
    #   run: cd ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/server; gcov **/*.gcno -a -u -b -c

    # - name: Coverage
    #   run: llvm-cov export -format=lcov -instr-profile ${{github.workspace}}/server/bin/project.profdata -object=${{github.workspace}}/server/bin/HangmanGameTest

    # - name: Reports
    #   run: genhtml --highlight --legend --output-directory ${{github.workspace}}/server/coverage -t "Hangman game Server coverage report" ${{github.workspace}}/server/coverage.info

    - name: Generate Swagger UI
      uses: Legion2/swagger-ui-action@v1
      with:
        output: ${{github.workspace}}/swagger-ui
        spec-file: ${{github.workspace}}/server/docs/api_doc.json

    - name: Archive Swagger UI
      uses: actions/upload-artifact@v2
      with:
        name: API-Docs-Hangman-Game
        path: ${{github.workspace}}/swagger-ui

    - name: Docs
      run: doxygen docg.conf

    - name: Archive Docs
      uses: actions/upload-artifact@v2
      with:
        name: Docs-Hangman-Game
        path: ${{github.workspace}}/docs

    - name: Archive Compilation DataBase
      uses: actions/upload-artifact@v2
      with:
        name: Compilation-Database
        path: ${{github.workspace}}/server/bin/compile_commands.json

    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v3
    - name: Run SonarQube
      if: github.actor!= 'dependabot[bot]'
      env:
        GITHUB_TOKEN: ${{ secrets.SONAR_REPO_ACCESS_TOKEN }}
      run: sonar-scanner
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        -Dsonar.verbose=false

 build-server-win:
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v2

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: 1.77.0
        # OPTIONAL: Specify a platform version
        platform_version: 2019
        # OPTIONAL: in workspace by default
        boost_install_dir: 'D:/'

    - name: Generate target 
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/server/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    # - name: Build server windows
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/server/bin

    # - name: Archive Server windows 
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: Server-Hangman-Game-Win
    #     path: ${{github.workspace}}/server/bin/HangmanGame

    # - name: Test
    #   working-directory: ${{github.workspace}}/server/bin
    #   # Execute tests defined by the CMake configuration.  
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ./HangmanGameTest

 build-client:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Install nodejs
      run: sudo apt install -y nodejs

   # - name: Install client's dependencies
   #   working-directory: ${{github.workspace}}/client
   #   run: npm install

   # - name: Build client
   #   working-directory: ${{github.workspace}}/client
   #   run: npm run build

   # - name: Archive IHM
   #   uses: actions/upload-artifact@v2
   #   with:
   #     name: IHM-Hangman-Game
   #     path: ${{github.workspace}}/client/build
