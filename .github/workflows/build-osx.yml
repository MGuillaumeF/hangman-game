name: HANGMAN-GAME - BUILD OSX

on:
  workflow_dispatch:
    inputs:
     BUILD_TYPE:
      description: 'Build type'
      required: true
      default: 'Release'
      type: choice
      options:
        - Debug
        - Release
     BOOST_VERSION:
      default: 1.81.0
      required: true
      type: string
     APPLICATION_NAME:
      default: HangmanGame
      required: true
      type: string
     APPLICATION_VERSION:
      default: 0.1.0
      required: true
      type: string
  workflow_call:
    inputs:
     BUILD_TYPE:
      description: 'Build type'
      required: true
      default: 'Release'
      type: choice
      options:
        - Debug
        - Release
     BOOST_VERSION:
      default: 1.81.0
      required: true
      type: string
     APPLICATION_NAME:
      default: HangmanGame
      required: true
      type: string
     APPLICATION_VERSION:
      default: 0.1.0
      required: true
      type: string

permissions: write-all

jobs:

 build:
    runs-on: macos-11
    steps:

    - uses: actions/checkout@v3

    - name: Create reports directory
	  if: ${{ inputs.BUILD_TYPE == 'Debug' }}
      run: mkdir ${{github.workspace}}/server/reports

    - uses: actions/download-artifact@v4
	  if: ${{ inputs.BUILD_TYPE == 'Release' }}
      with:
        name: IHM-Hangman-Game
        path: ${{github.workspace}}/client/build

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.3
      id: install-boost
      with:
        boost_version: ${{ inputs.BOOST_VERSION }}

    - name: Install compiler odb
      if: ${{ false }}
      working-directory: ${{github.workspace}}
      run: |
        brew install tree
        brew install gcc
        brew install mysql
        brew install autoconf-archive
        curl -o odb-2.4.0-i686-macosx.tar.bz2 https://www.codesynthesis.com/download/odb/2.4/odb-2.4.0-i686-macosx.tar.bz2
        sudo tar -xf odb-2.4.0-i686-macosx.tar.bz2
        tree odb-2.4.0-i686-macosx
        echo "${{github.workspace}}/odb-2.4.0-i686-macosx/bin" >> $GITHUB_PATH

    - name: Generate Model Sources
      if: ${{ false }}
      working-directory: ${{github.workspace}}/data-management/src/model
      run: |
        mkdir sqlite
        cp ./user.hxx ./sqlite/user.hxx
        cd sqlite
        odb --database sqlite --generate-query --generate-schema --std c++11 user.hxx || echo "SQLite failed"
        ls -a .
        cd ..
        mkdir mysql
        cp ./user.hxx ./mysql/user.hxx
        cd mysql
        odb --database mysql --generate-query --generate-schema --std c++11 user.hxx || echo "MySQL failed"
        ls -a .

    - name: Install lib odb
      if: ${{ false }}
      working-directory: ${{github.workspace}}/..
      run: |
        git clone https://github.com/Microsoft/vcpkg
        cd vcpkg
        git pull
        ./bootstrap-vcpkg.sh
        ./vcpkg update
        ./vcpkg integrate install
        # ./vcpkg install boost
        ./vcpkg install libodb
        ./vcpkg install libodb-sqlite
        ./vcpkg install libodb-mysql
        ./vcpkg install libmysql

    - name: Generate target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{inputs.BUILD_TYPE}} -D NOT_GENERATE_DB_ACCESS=true
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build server
      working-directory: ${{github.workspace}}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/bin

    - name: Server Tests ctest
	  if: ${{ inputs.BUILD_TYPE == 'Debug' }}
      working-directory: ${{github.workspace}}/server/test
      run: |
        chmod +x ./run-tests.sh
        ./run-tests.sh
		
    - name: Package Application
	  if: ${{ inputs.BUILD_TYPE == 'Release' }}
      working-directory: ${{github.workspace}}/bin
      run: cpack -G "ZIP;DragNDrop"

    - name: Archive Application OSX ZIP
	  if: ${{ inputs.BUILD_TYPE == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-Darwin.zip
        path: ${{github.workspace}}/bin/${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-Darwin.zip

    - name: Archive Application DMG
	  if: ${{ inputs.BUILD_TYPE == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-Darwin.dmg
        path: ${{github.workspace}}/bin/${{inputs.APPLICATION_NAME}}-${{inputs.APPLICATION_VERSION}}-Darwin.dmg